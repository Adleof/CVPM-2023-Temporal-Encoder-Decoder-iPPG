import cv2
import mediapipe as mp
import numpy as np
import matplotlib.pyplot as plt
from os import listdir
mp_drawing = mp.solutions.drawing_utils
mp_drawing_styles = mp.solutions.drawing_styles
mp_face_mesh = mp.solutions.face_mesh

# For webcam input:
drawing_spec = mp_drawing.DrawingSpec(thickness=1, circle_radius=1)
'''
pathdat: Folder to store the actual data
pathvis: Folder to store the data visualization(plot generated by matplotlib)
'''
personlist = listdir('face_video')
pathdat = "deap5ch/dat/"
pathvis = "deap5ch/visualize/"

#print('face_video/'+personid+'/'+vname)
for personid in personlist:
    vfilelist = listdir('face_video/'+personid)
    for vname in vfilelist:
        print('Video name: face_video/'+personid+'/'+vname)
        #cap = cv2.VideoCapture('face_video/'+'s04'+'/'+'s04_trial05.avi')
        cap = cv2.VideoCapture('face_video/'+personid+'/'+vname)
        curfiledat = []
        with mp_face_mesh.FaceMesh(
            max_num_faces=1,
            refine_landmarks=True,
            min_detection_confidence=0.5,
            min_tracking_confidence=0.5) as face_mesh:
            while cap.isOpened():
                success, image = cap.read()
                if not success:
                    print("Ignoring empty camera frame.")
                    # If loading a video, use 'break' instead of 'continue'.
                    break

                # To improve performance, optionally mark the image as not writeable to
                # pass by reference.
                image.flags.writeable = False
                image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
                results = face_mesh.process(image)
                height, width, channels = image.shape
                '''
                mask1-5: boolean mask array with the same size as the image for indicating ROIs. If more ROIs are needed add more masks as needed
                '''
                mask1 = np.zeros((height,width),dtype = 'uint8')
                #maskedimg1 = np.zeros(image.shape,dtype = 'uint8')

                mask2 = np.zeros((height,width),dtype = 'uint8')
                #maskedimg2 = np.zeros(image.shape,dtype = 'uint8')
                
                
                mask3 = np.zeros((height,width),dtype = 'uint8')
                mask4 = np.zeros((height,width),dtype = 'uint8')
                mask5 = np.zeros((height,width),dtype = 'uint8')
                
                # Draw the face mesh annotations on the image.
                image.flags.writeable = True
                image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
                if results.multi_face_landmarks:
                    for face_landmarks in results.multi_face_landmarks:
                        '''
                        The face_landmarks contains the entire face mesh.
                        face_landmarks.landmark[mkid].x is the horizontal pixel location of landmark with ID "mkid".
                        if want to change a ROI, change the desired vertices IDs in "polyindx", for more information about vertices ID, search google for "468 face landmarks".
                        '''
                        #print("**************")
                        #print(face_landmarks.x)
                        #polyindx = [9,151,107]
                        polyindx = [108,151,337,336,9,107]
                        points = np.array([[int(width*face_landmarks.landmark[mkid].x),int(height*face_landmarks.landmark[mkid].y)] for mkid in polyindx])
                        #print(points)
                        
                        mask1 = cv2.fillPoly(mask1, pts=[points], color=255)
                        #maskedimg1 = cv2.bitwise_and(image, image, mask=mask1)
                        meancolor = cv2.mean(image, mask=mask1)[0:3]
                        #maskedimg1 = cv2.putText(maskedimg1,"B:"+f'{meancolor[0]:.2f}'+" G:"+f'{meancolor[1]:.2f}'+" R:"+f'{meancolor[2]:.2f}', (100,100), cv2.FONT_HERSHEY_SIMPLEX, 1,(255,255,255),2,1)
                        
                        polyindx2 = [266,330,280,425]
                        points2 = np.array([[int(width*face_landmarks.landmark[mkid].x),int(height*face_landmarks.landmark[mkid].y)] for mkid in polyindx2])
                        
                        mask2 = cv2.fillPoly(mask2, pts=[points2], color=255)
                        #maskedimg2 = cv2.bitwise_and(image, image, mask=mask2)
                        meancolor2 = cv2.mean(image, mask=mask2)[0:3]
                        #maskedimg2 = cv2.putText(maskedimg2,"B:"+f'{meancolor2[0]:.2f}'+" G:"+f'{meancolor2[1]:.2f}'+" R:"+f'{meancolor2[2]:.2f}', (100,100), cv2.FONT_HERSHEY_SIMPLEX, 1,(255,255,255),2,1)
                        
                        
                        polyindx3 = [182,18,406,421,201]  #low lips
                        points3 = np.array([[int(width*face_landmarks.landmark[mkid].x),int(height*face_landmarks.landmark[mkid].y)] for mkid in polyindx3])
                        
                        mask3 = cv2.fillPoly(mask3, pts=[points3], color=255)
                        #maskedimg3 = cv2.bitwise_and(image, image, mask=mask3)
                        meancolor3 = cv2.mean(image, mask=mask3)[0:3]
                        #maskedimg2 = cv2.putText(maskedimg2,"B:"+f'{meancolor2[0]:.2f}'+" G:"+f'{meancolor2[1]:.2f}'+" R:"+f'{meancolor2[2]:.2f}', (100,100), cv2.FONT_HERSHEY_SIMPLEX, 1,(255,255,255),2,1)
                        
                        polyindx4 = [165,164,391,267,0,37]   #up lips
                        points4 = np.array([[int(width*face_landmarks.landmark[mkid].x),int(height*face_landmarks.landmark[mkid].y)] for mkid in polyindx4])
                        
                        mask4 = cv2.fillPoly(mask4, pts=[points4], color=255)
                        #maskedimg4 = cv2.bitwise_and(image, image, mask=mask4)
                        meancolor4 = cv2.mean(image, mask=mask4)[0:3]
                        
                        polyindx5 = [3,195,248,281,275,4,45,51]   #nose
                        points5 = np.array([[int(width*face_landmarks.landmark[mkid].x),int(height*face_landmarks.landmark[mkid].y)] for mkid in polyindx5])
                        
                        mask5 = cv2.fillPoly(mask5, pts=[points5], color=255)
                        #maskedimg5 = cv2.bitwise_and(image, image, mask=mask5)
                        meancolor5 = cv2.mean(image, mask=mask5)[0:3]
                        
                        curfiledat.append(np.hstack((np.array(meancolor),np.array(meancolor2),np.array(meancolor3),np.array(meancolor4),np.array(meancolor5))))
                        
                        #draw the facemesh
                        mp_drawing.draw_landmarks(
                            image=image,
                            landmark_list=face_landmarks,
                            connections=mp_face_mesh.FACEMESH_TESSELATION,
                            landmark_drawing_spec=None,
                            connection_drawing_spec=mp_drawing_styles
                            .get_default_face_mesh_tesselation_style())
                        
                        #draw overlay of the face ROIs
                        #overlay = image.copy()
                        #image = cv2.fillPoly(image, pts=[points], color=(0, 255, 0))
                        #image = cv2.fillPoly(image, pts=[points2], color=(0, 255, 0))
                        #image = cv2.fillPoly(image, pts=[points3], color=(0, 255, 0))
                        #image = cv2.fillPoly(image, pts=[points4], color=(0, 255, 0))
                        #image = cv2.fillPoly(image, pts=[points5], color=(0, 255, 0))
                        #alpha = 0.7
                        #image = cv2.addWeighted(overlay, alpha, image, 1 - alpha, 0)
                        
                        #draw selected vertices
                        for idx, pt in enumerate(points):
                            image = cv2.circle(image, (pt[0],pt[1]), radius=2, color=(0, 255, 0), thickness=-1)
                            #image = cv2.putText(image,str(polyindx[idx]), (pt[0],pt[1]), cv2.FONT_HERSHEY_SIMPLEX, 0.4,(0,255,255),1,1)
                        for idx, pt in enumerate(points2):
                            image = cv2.circle(image, (pt[0],pt[1]), radius=2, color=(0, 255, 0), thickness=-1)
                            #image = cv2.putText(image,str(polyindx[idx]), (pt[0],pt[1]), cv2.FONT_HERSHEY_SIMPLEX, 0.4,(0,255,255),1,1)
                        for idx, pt in enumerate(points3):
                            image = cv2.circle(image, (pt[0],pt[1]), radius=2, color=(0, 255, 0), thickness=-1)
                        for idx, pt in enumerate(points4):
                            image = cv2.circle(image, (pt[0],pt[1]), radius=2, color=(0, 255, 0), thickness=-1)
                        for idx, pt in enumerate(points5):
                            image = cv2.circle(image, (pt[0],pt[1]), radius=2, color=(0, 255, 0), thickness=-1)
                        
                        #put RGB values text around each ROI
                        image = cv2.putText(image,"B:"+f'{meancolor[0]:.2f}'+" G:"+f'{meancolor[1]:.2f}'+" R:"+f'{meancolor[2]:.2f}', (points[0][0]-110,points[0][1]-7), cv2.FONT_HERSHEY_SIMPLEX, 0.7,(255,255,255),2,1)
                        image = cv2.putText(image,"B:"+f'{meancolor2[0]:.2f}'+" G:"+f'{meancolor2[1]:.2f}'+" R:"+f'{meancolor2[2]:.2f}', (points2[3][0]-110,points2[3][1]+23), cv2.FONT_HERSHEY_SIMPLEX, 0.7,(255,255,255),2,1)
                        image = cv2.putText(image,"B:"+f'{meancolor3[0]:.2f}'+" G:"+f'{meancolor3[1]:.2f}'+" R:"+f'{meancolor3[2]:.2f}', (points3[3][0]-110,points3[3][1]+23), cv2.FONT_HERSHEY_SIMPLEX, 0.7,(255,255,255),2,1)
                        image = cv2.putText(image,"B:"+f'{meancolor4[0]:.2f}'+" G:"+f'{meancolor4[1]:.2f}'+" R:"+f'{meancolor4[2]:.2f}', (points4[3][0]-110,points4[3][1]+23), cv2.FONT_HERSHEY_SIMPLEX, 0.7,(255,255,255),2,1)
                        image = cv2.putText(image,"B:"+f'{meancolor5[0]:.2f}'+" G:"+f'{meancolor5[1]:.2f}'+" R:"+f'{meancolor5[2]:.2f}', (points5[3][0]-110,points5[3][1]+23), cv2.FONT_HERSHEY_SIMPLEX, 0.7,(255,255,255),2,1)
                 
                cv2.imshow('MediaPipe Face Mesh', image)
                #cv2.imshow('Mask1', maskedimg1)
                #cv2.imshow('Mask2', maskedimg2)
                if cv2.waitKey(5) & 0xFF == 27:
                   break
            
            #save the data array
            curfiledat = np.array(curfiledat)
            np.save(pathdat+vname+".npy",curfiledat)
            
            #save the plot
            plt.clf()
            plt.plot(curfiledat)
            plt.savefig(pathvis+vname+".png")
        cap.release()
        cv2.destroyAllWindows()
